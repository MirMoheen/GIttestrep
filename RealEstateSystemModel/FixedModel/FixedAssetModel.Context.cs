//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HRandPayrollSystemModel.FixedModel
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class FixedAssetEntities : DbContext
    {
        public FixedAssetEntities()
            : base("name=FixedAssetEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<tbl_EngineerDetail> tbl_EngineerDetail { get; set; }
        public virtual DbSet<tbl_MachineJob> tbl_MachineJob { get; set; }
        public virtual DbSet<tblMachine_Detail> tblMachine_Detail { get; set; }
        public virtual DbSet<tblMachine_Master> tblMachine_Master { get; set; }
        public virtual DbSet<tblMachine_Master_log> tblMachine_Master_log { get; set; }
        public virtual DbSet<Asset_no> Asset_no { get; set; }
        public virtual DbSet<Fixed_Asset_Category> Fixed_Asset_Category { get; set; }
        public virtual DbSet<Fixed_Asset_SubCategory> Fixed_Asset_SubCategory { get; set; }
        public virtual DbSet<FixedAssetEmployee> FixedAssetEmployees { get; set; }
        public virtual DbSet<Hospital> Hospitals { get; set; }
        public virtual DbSet<tblAssetLedger> tblAssetLedgers { get; set; }
        public virtual DbSet<tblcurrency> tblcurrencies { get; set; }
        public virtual DbSet<tblDisposal> tblDisposals { get; set; }
        public virtual DbSet<tblFinancialYear> tblFinancialYears { get; set; }
        public virtual DbSet<tblmenuName> tblmenuNames { get; set; }
        public virtual DbSet<tblMovement> tblMovements { get; set; }
        public virtual DbSet<tblRight> tblRights { get; set; }
        public virtual DbSet<tblRoleDetail> tblRoleDetails { get; set; }
        public virtual DbSet<tblRoom> tblRooms { get; set; }
        public virtual DbSet<tblSection> tblSections { get; set; }
        public virtual DbSet<tblSupplier> tblSuppliers { get; set; }
        public virtual DbSet<tblUnprintedTag> tblUnprintedTags { get; set; }
        public virtual DbSet<TblUserRole> TblUserRoles { get; set; }
        public virtual DbSet<tblUsersLogin> tblUsersLogins { get; set; }
        public virtual DbSet<tblAsset> tblAssets { get; set; }
        public virtual DbSet<AssetDocDetail> AssetDocDetails { get; set; }
        public virtual DbSet<tbl_FixedAssetAttachment> tbl_FixedAssetAttachment { get; set; }
        public virtual DbSet<tblAssetService> tblAssetServices { get; set; }
        public virtual DbSet<ServiceConfiguration> ServiceConfigurations { get; set; }
    
        public virtual ObjectResult<string> sp_add_asset(Nullable<int> id, string assetName, string assetDescrption, string assetModel, string assetManufacturer, Nullable<int> categoryId, Nullable<int> subCategoryId, Nullable<int> supplierId, string assetCondition, Nullable<int> financialYearId, string rV, string jVBRV, string jVBRVDate, string acquisitionDate, string disposalDate, Nullable<int> dayInUsed, string purchasedPrice, Nullable<int> currency, string convertPrice, string paymentMode, Nullable<decimal> depriciationRate, string currentStatus, string assetSalvageValue, string receivedDate, string receivedBy, string receivedIp, Nullable<int> hospCODE, string rVDate, string logDate, string logBy, string finDate, string finBy, string userId, string sectionId, Nullable<int> issuebyID, Nullable<int> issueToID, Nullable<System.DateTime> isseBYDate, Nullable<System.DateTime> issuetoDate, string ivNumber, Nullable<System.DateTime> ivDdate, string inspectionNo, Nullable<System.DateTime> inspectionDate, string poNumber, Nullable<System.DateTime> poDate, Nullable<System.DateTime> dateAson, string wDVD, string accDepreciation, string depreciationCharges, Nullable<bool> capitalize, string custodian, string chequeNo, Nullable<int> locationID, Nullable<int> departmentID, Nullable<int> roomID, string tag)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var assetNameParameter = assetName != null ?
                new ObjectParameter("AssetName", assetName) :
                new ObjectParameter("AssetName", typeof(string));
    
            var assetDescrptionParameter = assetDescrption != null ?
                new ObjectParameter("AssetDescrption", assetDescrption) :
                new ObjectParameter("AssetDescrption", typeof(string));
    
            var assetModelParameter = assetModel != null ?
                new ObjectParameter("AssetModel", assetModel) :
                new ObjectParameter("AssetModel", typeof(string));
    
            var assetManufacturerParameter = assetManufacturer != null ?
                new ObjectParameter("AssetManufacturer", assetManufacturer) :
                new ObjectParameter("AssetManufacturer", typeof(string));
    
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(int));
    
            var subCategoryIdParameter = subCategoryId.HasValue ?
                new ObjectParameter("SubCategoryId", subCategoryId) :
                new ObjectParameter("SubCategoryId", typeof(int));
    
            var supplierIdParameter = supplierId.HasValue ?
                new ObjectParameter("supplierId", supplierId) :
                new ObjectParameter("supplierId", typeof(int));
    
            var assetConditionParameter = assetCondition != null ?
                new ObjectParameter("AssetCondition", assetCondition) :
                new ObjectParameter("AssetCondition", typeof(string));
    
            var financialYearIdParameter = financialYearId.HasValue ?
                new ObjectParameter("financialYearId", financialYearId) :
                new ObjectParameter("financialYearId", typeof(int));
    
            var rVParameter = rV != null ?
                new ObjectParameter("RV", rV) :
                new ObjectParameter("RV", typeof(string));
    
            var jVBRVParameter = jVBRV != null ?
                new ObjectParameter("JVBRV", jVBRV) :
                new ObjectParameter("JVBRV", typeof(string));
    
            var jVBRVDateParameter = jVBRVDate != null ?
                new ObjectParameter("JVBRVDate", jVBRVDate) :
                new ObjectParameter("JVBRVDate", typeof(string));
    
            var acquisitionDateParameter = acquisitionDate != null ?
                new ObjectParameter("AcquisitionDate", acquisitionDate) :
                new ObjectParameter("AcquisitionDate", typeof(string));
    
            var disposalDateParameter = disposalDate != null ?
                new ObjectParameter("DisposalDate", disposalDate) :
                new ObjectParameter("DisposalDate", typeof(string));
    
            var dayInUsedParameter = dayInUsed.HasValue ?
                new ObjectParameter("DayInUsed", dayInUsed) :
                new ObjectParameter("DayInUsed", typeof(int));
    
            var purchasedPriceParameter = purchasedPrice != null ?
                new ObjectParameter("PurchasedPrice", purchasedPrice) :
                new ObjectParameter("PurchasedPrice", typeof(string));
    
            var currencyParameter = currency.HasValue ?
                new ObjectParameter("currency", currency) :
                new ObjectParameter("currency", typeof(int));
    
            var convertPriceParameter = convertPrice != null ?
                new ObjectParameter("convertPrice", convertPrice) :
                new ObjectParameter("convertPrice", typeof(string));
    
            var paymentModeParameter = paymentMode != null ?
                new ObjectParameter("PaymentMode", paymentMode) :
                new ObjectParameter("PaymentMode", typeof(string));
    
            var depriciationRateParameter = depriciationRate.HasValue ?
                new ObjectParameter("depriciationRate", depriciationRate) :
                new ObjectParameter("depriciationRate", typeof(decimal));
    
            var currentStatusParameter = currentStatus != null ?
                new ObjectParameter("CurrentStatus", currentStatus) :
                new ObjectParameter("CurrentStatus", typeof(string));
    
            var assetSalvageValueParameter = assetSalvageValue != null ?
                new ObjectParameter("AssetSalvageValue", assetSalvageValue) :
                new ObjectParameter("AssetSalvageValue", typeof(string));
    
            var receivedDateParameter = receivedDate != null ?
                new ObjectParameter("ReceivedDate", receivedDate) :
                new ObjectParameter("ReceivedDate", typeof(string));
    
            var receivedByParameter = receivedBy != null ?
                new ObjectParameter("ReceivedBy", receivedBy) :
                new ObjectParameter("ReceivedBy", typeof(string));
    
            var receivedIpParameter = receivedIp != null ?
                new ObjectParameter("ReceivedIp", receivedIp) :
                new ObjectParameter("ReceivedIp", typeof(string));
    
            var hospCODEParameter = hospCODE.HasValue ?
                new ObjectParameter("hospCODE", hospCODE) :
                new ObjectParameter("hospCODE", typeof(int));
    
            var rVDateParameter = rVDate != null ?
                new ObjectParameter("RVDate", rVDate) :
                new ObjectParameter("RVDate", typeof(string));
    
            var logDateParameter = logDate != null ?
                new ObjectParameter("LogDate", logDate) :
                new ObjectParameter("LogDate", typeof(string));
    
            var logByParameter = logBy != null ?
                new ObjectParameter("LogBy", logBy) :
                new ObjectParameter("LogBy", typeof(string));
    
            var finDateParameter = finDate != null ?
                new ObjectParameter("finDate", finDate) :
                new ObjectParameter("finDate", typeof(string));
    
            var finByParameter = finBy != null ?
                new ObjectParameter("FinBy", finBy) :
                new ObjectParameter("FinBy", typeof(string));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var sectionIdParameter = sectionId != null ?
                new ObjectParameter("sectionId", sectionId) :
                new ObjectParameter("sectionId", typeof(string));
    
            var issuebyIDParameter = issuebyID.HasValue ?
                new ObjectParameter("IssuebyID", issuebyID) :
                new ObjectParameter("IssuebyID", typeof(int));
    
            var issueToIDParameter = issueToID.HasValue ?
                new ObjectParameter("IssueToID", issueToID) :
                new ObjectParameter("IssueToID", typeof(int));
    
            var isseBYDateParameter = isseBYDate.HasValue ?
                new ObjectParameter("isseBYDate", isseBYDate) :
                new ObjectParameter("isseBYDate", typeof(System.DateTime));
    
            var issuetoDateParameter = issuetoDate.HasValue ?
                new ObjectParameter("issuetoDate", issuetoDate) :
                new ObjectParameter("issuetoDate", typeof(System.DateTime));
    
            var ivNumberParameter = ivNumber != null ?
                new ObjectParameter("IvNumber", ivNumber) :
                new ObjectParameter("IvNumber", typeof(string));
    
            var ivDdateParameter = ivDdate.HasValue ?
                new ObjectParameter("ivDdate", ivDdate) :
                new ObjectParameter("ivDdate", typeof(System.DateTime));
    
            var inspectionNoParameter = inspectionNo != null ?
                new ObjectParameter("inspectionNo", inspectionNo) :
                new ObjectParameter("inspectionNo", typeof(string));
    
            var inspectionDateParameter = inspectionDate.HasValue ?
                new ObjectParameter("InspectionDate", inspectionDate) :
                new ObjectParameter("InspectionDate", typeof(System.DateTime));
    
            var poNumberParameter = poNumber != null ?
                new ObjectParameter("PoNumber", poNumber) :
                new ObjectParameter("PoNumber", typeof(string));
    
            var poDateParameter = poDate.HasValue ?
                new ObjectParameter("PoDate", poDate) :
                new ObjectParameter("PoDate", typeof(System.DateTime));
    
            var dateAsonParameter = dateAson.HasValue ?
                new ObjectParameter("DateAson", dateAson) :
                new ObjectParameter("DateAson", typeof(System.DateTime));
    
            var wDVDParameter = wDVD != null ?
                new ObjectParameter("WDVD", wDVD) :
                new ObjectParameter("WDVD", typeof(string));
    
            var accDepreciationParameter = accDepreciation != null ?
                new ObjectParameter("AccDepreciation", accDepreciation) :
                new ObjectParameter("AccDepreciation", typeof(string));
    
            var depreciationChargesParameter = depreciationCharges != null ?
                new ObjectParameter("DepreciationCharges", depreciationCharges) :
                new ObjectParameter("DepreciationCharges", typeof(string));
    
            var capitalizeParameter = capitalize.HasValue ?
                new ObjectParameter("Capitalize", capitalize) :
                new ObjectParameter("Capitalize", typeof(bool));
    
            var custodianParameter = custodian != null ?
                new ObjectParameter("Custodian", custodian) :
                new ObjectParameter("Custodian", typeof(string));
    
            var chequeNoParameter = chequeNo != null ?
                new ObjectParameter("chequeNo", chequeNo) :
                new ObjectParameter("chequeNo", typeof(string));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var roomIDParameter = roomID.HasValue ?
                new ObjectParameter("RoomID", roomID) :
                new ObjectParameter("RoomID", typeof(int));
    
            var tagParameter = tag != null ?
                new ObjectParameter("tag", tag) :
                new ObjectParameter("tag", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_add_asset", idParameter, assetNameParameter, assetDescrptionParameter, assetModelParameter, assetManufacturerParameter, categoryIdParameter, subCategoryIdParameter, supplierIdParameter, assetConditionParameter, financialYearIdParameter, rVParameter, jVBRVParameter, jVBRVDateParameter, acquisitionDateParameter, disposalDateParameter, dayInUsedParameter, purchasedPriceParameter, currencyParameter, convertPriceParameter, paymentModeParameter, depriciationRateParameter, currentStatusParameter, assetSalvageValueParameter, receivedDateParameter, receivedByParameter, receivedIpParameter, hospCODEParameter, rVDateParameter, logDateParameter, logByParameter, finDateParameter, finByParameter, userIdParameter, sectionIdParameter, issuebyIDParameter, issueToIDParameter, isseBYDateParameter, issuetoDateParameter, ivNumberParameter, ivDdateParameter, inspectionNoParameter, inspectionDateParameter, poNumberParameter, poDateParameter, dateAsonParameter, wDVDParameter, accDepreciationParameter, depreciationChargesParameter, capitalizeParameter, custodianParameter, chequeNoParameter, locationIDParameter, departmentIDParameter, roomIDParameter, tagParameter);
        }
    
        public virtual int sp_add_Depreciation(string itemid, Nullable<int> finincialYearID, string date, Nullable<int> classCategory, string uid, string ip, string projectID)
        {
            var itemidParameter = itemid != null ?
                new ObjectParameter("itemid", itemid) :
                new ObjectParameter("itemid", typeof(string));
    
            var finincialYearIDParameter = finincialYearID.HasValue ?
                new ObjectParameter("FinincialYearID", finincialYearID) :
                new ObjectParameter("FinincialYearID", typeof(int));
    
            var dateParameter = date != null ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(string));
    
            var classCategoryParameter = classCategory.HasValue ?
                new ObjectParameter("classCategory", classCategory) :
                new ObjectParameter("classCategory", typeof(int));
    
            var uidParameter = uid != null ?
                new ObjectParameter("uid", uid) :
                new ObjectParameter("uid", typeof(string));
    
            var ipParameter = ip != null ?
                new ObjectParameter("ip", ip) :
                new ObjectParameter("ip", typeof(string));
    
            var projectIDParameter = projectID != null ?
                new ObjectParameter("projectID", projectID) :
                new ObjectParameter("projectID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_add_Depreciation", itemidParameter, finincialYearIDParameter, dateParameter, classCategoryParameter, uidParameter, ipParameter, projectIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_add_section(string uid, string userIp, string secname, Nullable<long> catId, Nullable<int> subcatID, string prefix)
        {
            var uidParameter = uid != null ?
                new ObjectParameter("Uid", uid) :
                new ObjectParameter("Uid", typeof(string));
    
            var userIpParameter = userIp != null ?
                new ObjectParameter("UserIp", userIp) :
                new ObjectParameter("UserIp", typeof(string));
    
            var secnameParameter = secname != null ?
                new ObjectParameter("Secname", secname) :
                new ObjectParameter("Secname", typeof(string));
    
            var catIdParameter = catId.HasValue ?
                new ObjectParameter("CatId", catId) :
                new ObjectParameter("CatId", typeof(long));
    
            var subcatIDParameter = subcatID.HasValue ?
                new ObjectParameter("subcatID", subcatID) :
                new ObjectParameter("subcatID", typeof(int));
    
            var prefixParameter = prefix != null ?
                new ObjectParameter("prefix", prefix) :
                new ObjectParameter("prefix", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_add_section", uidParameter, userIpParameter, secnameParameter, catIdParameter, subcatIDParameter, prefixParameter);
        }
    
        public virtual int sp_AddMachineDetail(string grn, string itemID, Nullable<System.DateTime> warrantyStartDate, Nullable<System.DateTime> warrantyEndDate, string amp, string powCat, Nullable<System.DateTime> mainStartDate, Nullable<System.DateTime> mainEndDate, string eqpName, string serial, string model, string manufac, string manufacOrigin, string supplierName, string supplierAddress, string supplierTelephone, string supplierMobile, string supplierEmail, string eqpImage, string inspectName, string inspectDesignation, string inspectRecomm, string inspectRemarks, string userAccName, string userAccDesignation, string userAccRecomm, string userAccRemarks, string headInspectName, string headInspectDesignation, string headInspectRecomm, string headInspectRemarks, string serviceProvider, string contact, string email, Nullable<bool> maintenanceSchedule, Nullable<System.DateTime> currMainDate, string schedulePeriod, Nullable<System.DateTime> nextMainDueDate, string uid, string ip, Nullable<int> updateID, ObjectParameter id, string condition, string assetNo, string type)
        {
            var grnParameter = grn != null ?
                new ObjectParameter("grn", grn) :
                new ObjectParameter("grn", typeof(string));
    
            var itemIDParameter = itemID != null ?
                new ObjectParameter("itemID", itemID) :
                new ObjectParameter("itemID", typeof(string));
    
            var warrantyStartDateParameter = warrantyStartDate.HasValue ?
                new ObjectParameter("WarrantyStartDate", warrantyStartDate) :
                new ObjectParameter("WarrantyStartDate", typeof(System.DateTime));
    
            var warrantyEndDateParameter = warrantyEndDate.HasValue ?
                new ObjectParameter("WarrantyEndDate", warrantyEndDate) :
                new ObjectParameter("WarrantyEndDate", typeof(System.DateTime));
    
            var ampParameter = amp != null ?
                new ObjectParameter("Amp", amp) :
                new ObjectParameter("Amp", typeof(string));
    
            var powCatParameter = powCat != null ?
                new ObjectParameter("PowCat", powCat) :
                new ObjectParameter("PowCat", typeof(string));
    
            var mainStartDateParameter = mainStartDate.HasValue ?
                new ObjectParameter("MainStartDate", mainStartDate) :
                new ObjectParameter("MainStartDate", typeof(System.DateTime));
    
            var mainEndDateParameter = mainEndDate.HasValue ?
                new ObjectParameter("MainEndDate", mainEndDate) :
                new ObjectParameter("MainEndDate", typeof(System.DateTime));
    
            var eqpNameParameter = eqpName != null ?
                new ObjectParameter("EqpName", eqpName) :
                new ObjectParameter("EqpName", typeof(string));
    
            var serialParameter = serial != null ?
                new ObjectParameter("serial", serial) :
                new ObjectParameter("serial", typeof(string));
    
            var modelParameter = model != null ?
                new ObjectParameter("model", model) :
                new ObjectParameter("model", typeof(string));
    
            var manufacParameter = manufac != null ?
                new ObjectParameter("Manufac", manufac) :
                new ObjectParameter("Manufac", typeof(string));
    
            var manufacOriginParameter = manufacOrigin != null ?
                new ObjectParameter("ManufacOrigin", manufacOrigin) :
                new ObjectParameter("ManufacOrigin", typeof(string));
    
            var supplierNameParameter = supplierName != null ?
                new ObjectParameter("supplierName", supplierName) :
                new ObjectParameter("supplierName", typeof(string));
    
            var supplierAddressParameter = supplierAddress != null ?
                new ObjectParameter("SupplierAddress", supplierAddress) :
                new ObjectParameter("SupplierAddress", typeof(string));
    
            var supplierTelephoneParameter = supplierTelephone != null ?
                new ObjectParameter("SupplierTelephone", supplierTelephone) :
                new ObjectParameter("SupplierTelephone", typeof(string));
    
            var supplierMobileParameter = supplierMobile != null ?
                new ObjectParameter("SupplierMobile", supplierMobile) :
                new ObjectParameter("SupplierMobile", typeof(string));
    
            var supplierEmailParameter = supplierEmail != null ?
                new ObjectParameter("SupplierEmail", supplierEmail) :
                new ObjectParameter("SupplierEmail", typeof(string));
    
            var eqpImageParameter = eqpImage != null ?
                new ObjectParameter("EqpImage", eqpImage) :
                new ObjectParameter("EqpImage", typeof(string));
    
            var inspectNameParameter = inspectName != null ?
                new ObjectParameter("InspectName", inspectName) :
                new ObjectParameter("InspectName", typeof(string));
    
            var inspectDesignationParameter = inspectDesignation != null ?
                new ObjectParameter("InspectDesignation", inspectDesignation) :
                new ObjectParameter("InspectDesignation", typeof(string));
    
            var inspectRecommParameter = inspectRecomm != null ?
                new ObjectParameter("InspectRecomm", inspectRecomm) :
                new ObjectParameter("InspectRecomm", typeof(string));
    
            var inspectRemarksParameter = inspectRemarks != null ?
                new ObjectParameter("InspectRemarks", inspectRemarks) :
                new ObjectParameter("InspectRemarks", typeof(string));
    
            var userAccNameParameter = userAccName != null ?
                new ObjectParameter("UserAccName", userAccName) :
                new ObjectParameter("UserAccName", typeof(string));
    
            var userAccDesignationParameter = userAccDesignation != null ?
                new ObjectParameter("UserAccDesignation", userAccDesignation) :
                new ObjectParameter("UserAccDesignation", typeof(string));
    
            var userAccRecommParameter = userAccRecomm != null ?
                new ObjectParameter("UserAccRecomm", userAccRecomm) :
                new ObjectParameter("UserAccRecomm", typeof(string));
    
            var userAccRemarksParameter = userAccRemarks != null ?
                new ObjectParameter("UserAccRemarks", userAccRemarks) :
                new ObjectParameter("UserAccRemarks", typeof(string));
    
            var headInspectNameParameter = headInspectName != null ?
                new ObjectParameter("HeadInspectName", headInspectName) :
                new ObjectParameter("HeadInspectName", typeof(string));
    
            var headInspectDesignationParameter = headInspectDesignation != null ?
                new ObjectParameter("HeadInspectDesignation", headInspectDesignation) :
                new ObjectParameter("HeadInspectDesignation", typeof(string));
    
            var headInspectRecommParameter = headInspectRecomm != null ?
                new ObjectParameter("HeadInspectRecomm", headInspectRecomm) :
                new ObjectParameter("HeadInspectRecomm", typeof(string));
    
            var headInspectRemarksParameter = headInspectRemarks != null ?
                new ObjectParameter("HeadInspectRemarks", headInspectRemarks) :
                new ObjectParameter("HeadInspectRemarks", typeof(string));
    
            var serviceProviderParameter = serviceProvider != null ?
                new ObjectParameter("ServiceProvider", serviceProvider) :
                new ObjectParameter("ServiceProvider", typeof(string));
    
            var contactParameter = contact != null ?
                new ObjectParameter("Contact", contact) :
                new ObjectParameter("Contact", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var maintenanceScheduleParameter = maintenanceSchedule.HasValue ?
                new ObjectParameter("MaintenanceSchedule", maintenanceSchedule) :
                new ObjectParameter("MaintenanceSchedule", typeof(bool));
    
            var currMainDateParameter = currMainDate.HasValue ?
                new ObjectParameter("CurrMainDate", currMainDate) :
                new ObjectParameter("CurrMainDate", typeof(System.DateTime));
    
            var schedulePeriodParameter = schedulePeriod != null ?
                new ObjectParameter("SchedulePeriod", schedulePeriod) :
                new ObjectParameter("SchedulePeriod", typeof(string));
    
            var nextMainDueDateParameter = nextMainDueDate.HasValue ?
                new ObjectParameter("NextMainDueDate", nextMainDueDate) :
                new ObjectParameter("NextMainDueDate", typeof(System.DateTime));
    
            var uidParameter = uid != null ?
                new ObjectParameter("uid", uid) :
                new ObjectParameter("uid", typeof(string));
    
            var ipParameter = ip != null ?
                new ObjectParameter("ip", ip) :
                new ObjectParameter("ip", typeof(string));
    
            var updateIDParameter = updateID.HasValue ?
                new ObjectParameter("updateID", updateID) :
                new ObjectParameter("updateID", typeof(int));
    
            var conditionParameter = condition != null ?
                new ObjectParameter("condition", condition) :
                new ObjectParameter("condition", typeof(string));
    
            var assetNoParameter = assetNo != null ?
                new ObjectParameter("AssetNo", assetNo) :
                new ObjectParameter("AssetNo", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AddMachineDetail", grnParameter, itemIDParameter, warrantyStartDateParameter, warrantyEndDateParameter, ampParameter, powCatParameter, mainStartDateParameter, mainEndDateParameter, eqpNameParameter, serialParameter, modelParameter, manufacParameter, manufacOriginParameter, supplierNameParameter, supplierAddressParameter, supplierTelephoneParameter, supplierMobileParameter, supplierEmailParameter, eqpImageParameter, inspectNameParameter, inspectDesignationParameter, inspectRecommParameter, inspectRemarksParameter, userAccNameParameter, userAccDesignationParameter, userAccRecommParameter, userAccRemarksParameter, headInspectNameParameter, headInspectDesignationParameter, headInspectRecommParameter, headInspectRemarksParameter, serviceProviderParameter, contactParameter, emailParameter, maintenanceScheduleParameter, currMainDateParameter, schedulePeriodParameter, nextMainDueDateParameter, uidParameter, ipParameter, updateIDParameter, id, conditionParameter, assetNoParameter, typeParameter);
        }
    
        public virtual int sp_AddMachineDetailTable(Nullable<int> machineID, string voucherNo, string itemID, string name, string des, Nullable<bool> status, string type)
        {
            var machineIDParameter = machineID.HasValue ?
                new ObjectParameter("MachineID", machineID) :
                new ObjectParameter("MachineID", typeof(int));
    
            var voucherNoParameter = voucherNo != null ?
                new ObjectParameter("voucherNo", voucherNo) :
                new ObjectParameter("voucherNo", typeof(string));
    
            var itemIDParameter = itemID != null ?
                new ObjectParameter("itemID", itemID) :
                new ObjectParameter("itemID", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var desParameter = des != null ?
                new ObjectParameter("Des", des) :
                new ObjectParameter("Des", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(bool));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AddMachineDetailTable", machineIDParameter, voucherNoParameter, itemIDParameter, nameParameter, desParameter, statusParameter, typeParameter);
        }
    
        public virtual int sp_AddMachineJob(Nullable<System.DateTime> jobOpenDate, Nullable<System.DateTime> jobCloseDate, string jobNo, string jobNature, string faultReported, string repairAction, string partReplace, Nullable<int> repairExp, string jobStatus, string jobCompleteBy, string downTime, string filePath, string uid, string ip, Nullable<bool> status, string serialNo, string jobType, Nullable<int> machineID, Nullable<System.DateTime> currMain, string period, Nullable<System.DateTime> nextMain, Nullable<bool> checkAllProcedure, string updateID)
        {
            var jobOpenDateParameter = jobOpenDate.HasValue ?
                new ObjectParameter("jobOpenDate", jobOpenDate) :
                new ObjectParameter("jobOpenDate", typeof(System.DateTime));
    
            var jobCloseDateParameter = jobCloseDate.HasValue ?
                new ObjectParameter("jobCloseDate", jobCloseDate) :
                new ObjectParameter("jobCloseDate", typeof(System.DateTime));
    
            var jobNoParameter = jobNo != null ?
                new ObjectParameter("jobNo", jobNo) :
                new ObjectParameter("jobNo", typeof(string));
    
            var jobNatureParameter = jobNature != null ?
                new ObjectParameter("jobNature", jobNature) :
                new ObjectParameter("jobNature", typeof(string));
    
            var faultReportedParameter = faultReported != null ?
                new ObjectParameter("faultReported", faultReported) :
                new ObjectParameter("faultReported", typeof(string));
    
            var repairActionParameter = repairAction != null ?
                new ObjectParameter("RepairAction", repairAction) :
                new ObjectParameter("RepairAction", typeof(string));
    
            var partReplaceParameter = partReplace != null ?
                new ObjectParameter("PartReplace", partReplace) :
                new ObjectParameter("PartReplace", typeof(string));
    
            var repairExpParameter = repairExp.HasValue ?
                new ObjectParameter("RepairExp", repairExp) :
                new ObjectParameter("RepairExp", typeof(int));
    
            var jobStatusParameter = jobStatus != null ?
                new ObjectParameter("jobStatus", jobStatus) :
                new ObjectParameter("jobStatus", typeof(string));
    
            var jobCompleteByParameter = jobCompleteBy != null ?
                new ObjectParameter("jobCompleteBy", jobCompleteBy) :
                new ObjectParameter("jobCompleteBy", typeof(string));
    
            var downTimeParameter = downTime != null ?
                new ObjectParameter("DownTime", downTime) :
                new ObjectParameter("DownTime", typeof(string));
    
            var filePathParameter = filePath != null ?
                new ObjectParameter("FilePath", filePath) :
                new ObjectParameter("FilePath", typeof(string));
    
            var uidParameter = uid != null ?
                new ObjectParameter("uid", uid) :
                new ObjectParameter("uid", typeof(string));
    
            var ipParameter = ip != null ?
                new ObjectParameter("ip", ip) :
                new ObjectParameter("ip", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(bool));
    
            var serialNoParameter = serialNo != null ?
                new ObjectParameter("SerialNo", serialNo) :
                new ObjectParameter("SerialNo", typeof(string));
    
            var jobTypeParameter = jobType != null ?
                new ObjectParameter("jobType", jobType) :
                new ObjectParameter("jobType", typeof(string));
    
            var machineIDParameter = machineID.HasValue ?
                new ObjectParameter("MachineID", machineID) :
                new ObjectParameter("MachineID", typeof(int));
    
            var currMainParameter = currMain.HasValue ?
                new ObjectParameter("currMain", currMain) :
                new ObjectParameter("currMain", typeof(System.DateTime));
    
            var periodParameter = period != null ?
                new ObjectParameter("period", period) :
                new ObjectParameter("period", typeof(string));
    
            var nextMainParameter = nextMain.HasValue ?
                new ObjectParameter("NextMain", nextMain) :
                new ObjectParameter("NextMain", typeof(System.DateTime));
    
            var checkAllProcedureParameter = checkAllProcedure.HasValue ?
                new ObjectParameter("checkAllProcedure", checkAllProcedure) :
                new ObjectParameter("checkAllProcedure", typeof(bool));
    
            var updateIDParameter = updateID != null ?
                new ObjectParameter("updateID", updateID) :
                new ObjectParameter("updateID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AddMachineJob", jobOpenDateParameter, jobCloseDateParameter, jobNoParameter, jobNatureParameter, faultReportedParameter, repairActionParameter, partReplaceParameter, repairExpParameter, jobStatusParameter, jobCompleteByParameter, downTimeParameter, filePathParameter, uidParameter, ipParameter, statusParameter, serialNoParameter, jobTypeParameter, machineIDParameter, currMainParameter, periodParameter, nextMainParameter, checkAllProcedureParameter, updateIDParameter);
        }
    
        public virtual int sp_AdjEntry(Nullable<int> assetId, string assetNo, Nullable<double> aMT, Nullable<int> yearId, string ip, Nullable<int> userId)
        {
            var assetIdParameter = assetId.HasValue ?
                new ObjectParameter("assetId", assetId) :
                new ObjectParameter("assetId", typeof(int));
    
            var assetNoParameter = assetNo != null ?
                new ObjectParameter("AssetNo", assetNo) :
                new ObjectParameter("AssetNo", typeof(string));
    
            var aMTParameter = aMT.HasValue ?
                new ObjectParameter("AMT", aMT) :
                new ObjectParameter("AMT", typeof(double));
    
            var yearIdParameter = yearId.HasValue ?
                new ObjectParameter("yearId", yearId) :
                new ObjectParameter("yearId", typeof(int));
    
            var ipParameter = ip != null ?
                new ObjectParameter("ip", ip) :
                new ObjectParameter("ip", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AdjEntry", assetIdParameter, assetNoParameter, aMTParameter, yearIdParameter, ipParameter, userIdParameter);
        }
    
        public virtual ObjectResult<sp_AnnualReport1111_Result> sp_AnnualReport1111(Nullable<int> year, Nullable<bool> chk, string locationID)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            var chkParameter = chk.HasValue ?
                new ObjectParameter("chk", chk) :
                new ObjectParameter("chk", typeof(bool));
    
            var locationIDParameter = locationID != null ?
                new ObjectParameter("locationID", locationID) :
                new ObjectParameter("locationID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AnnualReport1111_Result>("sp_AnnualReport1111", yearParameter, chkParameter, locationIDParameter);
        }
    
        public virtual int sp_asset_financeVarify(string assetId, string receivedDate, string receivedBy, string receivedIp)
        {
            var assetIdParameter = assetId != null ?
                new ObjectParameter("AssetId", assetId) :
                new ObjectParameter("AssetId", typeof(string));
    
            var receivedDateParameter = receivedDate != null ?
                new ObjectParameter("ReceivedDate", receivedDate) :
                new ObjectParameter("ReceivedDate", typeof(string));
    
            var receivedByParameter = receivedBy != null ?
                new ObjectParameter("ReceivedBy", receivedBy) :
                new ObjectParameter("ReceivedBy", typeof(string));
    
            var receivedIpParameter = receivedIp != null ?
                new ObjectParameter("ReceivedIp", receivedIp) :
                new ObjectParameter("ReceivedIp", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_asset_financeVarify", assetIdParameter, receivedDateParameter, receivedByParameter, receivedIpParameter);
        }
    
        public virtual int sp_asset_logVarify(string assetId, string receivedDate, string receivedBy, string receivedIp)
        {
            var assetIdParameter = assetId != null ?
                new ObjectParameter("AssetId", assetId) :
                new ObjectParameter("AssetId", typeof(string));
    
            var receivedDateParameter = receivedDate != null ?
                new ObjectParameter("ReceivedDate", receivedDate) :
                new ObjectParameter("ReceivedDate", typeof(string));
    
            var receivedByParameter = receivedBy != null ?
                new ObjectParameter("ReceivedBy", receivedBy) :
                new ObjectParameter("ReceivedBy", typeof(string));
    
            var receivedIpParameter = receivedIp != null ?
                new ObjectParameter("ReceivedIp", receivedIp) :
                new ObjectParameter("ReceivedIp", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_asset_logVarify", assetIdParameter, receivedDateParameter, receivedByParameter, receivedIpParameter);
        }
    
        public virtual int sp_Asset_no(Nullable<long> hosp_id, Nullable<long> year, ObjectParameter @int)
        {
            var hosp_idParameter = hosp_id.HasValue ?
                new ObjectParameter("Hosp_id", hosp_id) :
                new ObjectParameter("Hosp_id", typeof(long));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Asset_no", hosp_idParameter, yearParameter, @int);
        }
    
        public virtual ObjectResult<sp_Calculate_Depreciation_Result> sp_Calculate_Depreciation()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Calculate_Depreciation_Result>("sp_Calculate_Depreciation");
        }
    
        public virtual ObjectResult<sp_DepricationYearWiseReport_Result> sp_DepricationYearWiseReport(Nullable<int> fYear, Nullable<int> @class, Nullable<int> subClass, Nullable<int> section, Nullable<int> project, Nullable<int> department, string itemNAme)
        {
            var fYearParameter = fYear.HasValue ?
                new ObjectParameter("FYear", fYear) :
                new ObjectParameter("FYear", typeof(int));
    
            var classParameter = @class.HasValue ?
                new ObjectParameter("class", @class) :
                new ObjectParameter("class", typeof(int));
    
            var subClassParameter = subClass.HasValue ?
                new ObjectParameter("subClass", subClass) :
                new ObjectParameter("subClass", typeof(int));
    
            var sectionParameter = section.HasValue ?
                new ObjectParameter("section", section) :
                new ObjectParameter("section", typeof(int));
    
            var projectParameter = project.HasValue ?
                new ObjectParameter("project", project) :
                new ObjectParameter("project", typeof(int));
    
            var departmentParameter = department.HasValue ?
                new ObjectParameter("department", department) :
                new ObjectParameter("department", typeof(int));
    
            var itemNAmeParameter = itemNAme != null ?
                new ObjectParameter("ItemNAme", itemNAme) :
                new ObjectParameter("ItemNAme", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_DepricationYearWiseReport_Result>("sp_DepricationYearWiseReport", fYearParameter, classParameter, subClassParameter, sectionParameter, projectParameter, departmentParameter, itemNAmeParameter);
        }
    
        public virtual int sp_Disposed_Asset(string assetId, string assetNo, string depricaitionValue, string disposalType, string writeOfReason, string saleValue, string paymentMode, string soldReasons, string buyer, string jvNo, string jVDate, string disposalBy, string disposalDate, string approvedBy, string approvedDate, string varifiedBy, string varifiedDate, string entryBy, string entryIp, string chequeNo, Nullable<int> technicalClearcnce, Nullable<System.DateTime> technicalclearnceDate, Nullable<System.DateTime> depriciateDate)
        {
            var assetIdParameter = assetId != null ?
                new ObjectParameter("AssetId", assetId) :
                new ObjectParameter("AssetId", typeof(string));
    
            var assetNoParameter = assetNo != null ?
                new ObjectParameter("AssetNo", assetNo) :
                new ObjectParameter("AssetNo", typeof(string));
    
            var depricaitionValueParameter = depricaitionValue != null ?
                new ObjectParameter("depricaitionValue", depricaitionValue) :
                new ObjectParameter("depricaitionValue", typeof(string));
    
            var disposalTypeParameter = disposalType != null ?
                new ObjectParameter("disposalType", disposalType) :
                new ObjectParameter("disposalType", typeof(string));
    
            var writeOfReasonParameter = writeOfReason != null ?
                new ObjectParameter("WriteOfReason", writeOfReason) :
                new ObjectParameter("WriteOfReason", typeof(string));
    
            var saleValueParameter = saleValue != null ?
                new ObjectParameter("SaleValue", saleValue) :
                new ObjectParameter("SaleValue", typeof(string));
    
            var paymentModeParameter = paymentMode != null ?
                new ObjectParameter("PaymentMode", paymentMode) :
                new ObjectParameter("PaymentMode", typeof(string));
    
            var soldReasonsParameter = soldReasons != null ?
                new ObjectParameter("SoldReasons", soldReasons) :
                new ObjectParameter("SoldReasons", typeof(string));
    
            var buyerParameter = buyer != null ?
                new ObjectParameter("Buyer", buyer) :
                new ObjectParameter("Buyer", typeof(string));
    
            var jvNoParameter = jvNo != null ?
                new ObjectParameter("JvNo", jvNo) :
                new ObjectParameter("JvNo", typeof(string));
    
            var jVDateParameter = jVDate != null ?
                new ObjectParameter("JVDate", jVDate) :
                new ObjectParameter("JVDate", typeof(string));
    
            var disposalByParameter = disposalBy != null ?
                new ObjectParameter("disposalBy", disposalBy) :
                new ObjectParameter("disposalBy", typeof(string));
    
            var disposalDateParameter = disposalDate != null ?
                new ObjectParameter("DisposalDate", disposalDate) :
                new ObjectParameter("DisposalDate", typeof(string));
    
            var approvedByParameter = approvedBy != null ?
                new ObjectParameter("ApprovedBy", approvedBy) :
                new ObjectParameter("ApprovedBy", typeof(string));
    
            var approvedDateParameter = approvedDate != null ?
                new ObjectParameter("ApprovedDate", approvedDate) :
                new ObjectParameter("ApprovedDate", typeof(string));
    
            var varifiedByParameter = varifiedBy != null ?
                new ObjectParameter("VarifiedBy", varifiedBy) :
                new ObjectParameter("VarifiedBy", typeof(string));
    
            var varifiedDateParameter = varifiedDate != null ?
                new ObjectParameter("VarifiedDate", varifiedDate) :
                new ObjectParameter("VarifiedDate", typeof(string));
    
            var entryByParameter = entryBy != null ?
                new ObjectParameter("entryBy", entryBy) :
                new ObjectParameter("entryBy", typeof(string));
    
            var entryIpParameter = entryIp != null ?
                new ObjectParameter("entryIp", entryIp) :
                new ObjectParameter("entryIp", typeof(string));
    
            var chequeNoParameter = chequeNo != null ?
                new ObjectParameter("chequeNo", chequeNo) :
                new ObjectParameter("chequeNo", typeof(string));
    
            var technicalClearcnceParameter = technicalClearcnce.HasValue ?
                new ObjectParameter("technicalClearcnce", technicalClearcnce) :
                new ObjectParameter("technicalClearcnce", typeof(int));
    
            var technicalclearnceDateParameter = technicalclearnceDate.HasValue ?
                new ObjectParameter("technicalclearnceDate", technicalclearnceDate) :
                new ObjectParameter("technicalclearnceDate", typeof(System.DateTime));
    
            var depriciateDateParameter = depriciateDate.HasValue ?
                new ObjectParameter("depriciateDate", depriciateDate) :
                new ObjectParameter("depriciateDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Disposed_Asset", assetIdParameter, assetNoParameter, depricaitionValueParameter, disposalTypeParameter, writeOfReasonParameter, saleValueParameter, paymentModeParameter, soldReasonsParameter, buyerParameter, jvNoParameter, jVDateParameter, disposalByParameter, disposalDateParameter, approvedByParameter, approvedDateParameter, varifiedByParameter, varifiedDateParameter, entryByParameter, entryIpParameter, chequeNoParameter, technicalClearcnceParameter, technicalclearnceDateParameter, depriciateDateParameter);
        }
    
        public virtual int sp_fixed_asset_reg(string assetDescrption, string catgryddl, string subCatgryddl, string locddl, string deptddl, Nullable<long> roomddl, string supplierInfo, string conditionInfo, string receivedvocuher, string generalvoucher, Nullable<System.DateTime> acuqusitionDate, Nullable<System.DateTime> disposalDate, string daysuse, string unit, string rateUnit, string pprice, string userId, string userIp, Nullable<System.DateTime> createddate, string assetName, string paymntmode, Nullable<bool> status, string assetrcvd, string desginationasst, Nullable<System.DateTime> verifieddt)
        {
            var assetDescrptionParameter = assetDescrption != null ?
                new ObjectParameter("AssetDescrption", assetDescrption) :
                new ObjectParameter("AssetDescrption", typeof(string));
    
            var catgryddlParameter = catgryddl != null ?
                new ObjectParameter("Catgryddl", catgryddl) :
                new ObjectParameter("Catgryddl", typeof(string));
    
            var subCatgryddlParameter = subCatgryddl != null ?
                new ObjectParameter("SubCatgryddl", subCatgryddl) :
                new ObjectParameter("SubCatgryddl", typeof(string));
    
            var locddlParameter = locddl != null ?
                new ObjectParameter("Locddl", locddl) :
                new ObjectParameter("Locddl", typeof(string));
    
            var deptddlParameter = deptddl != null ?
                new ObjectParameter("deptddl", deptddl) :
                new ObjectParameter("deptddl", typeof(string));
    
            var roomddlParameter = roomddl.HasValue ?
                new ObjectParameter("Roomddl", roomddl) :
                new ObjectParameter("Roomddl", typeof(long));
    
            var supplierInfoParameter = supplierInfo != null ?
                new ObjectParameter("SupplierInfo", supplierInfo) :
                new ObjectParameter("SupplierInfo", typeof(string));
    
            var conditionInfoParameter = conditionInfo != null ?
                new ObjectParameter("ConditionInfo", conditionInfo) :
                new ObjectParameter("ConditionInfo", typeof(string));
    
            var receivedvocuherParameter = receivedvocuher != null ?
                new ObjectParameter("Receivedvocuher", receivedvocuher) :
                new ObjectParameter("Receivedvocuher", typeof(string));
    
            var generalvoucherParameter = generalvoucher != null ?
                new ObjectParameter("Generalvoucher", generalvoucher) :
                new ObjectParameter("Generalvoucher", typeof(string));
    
            var acuqusitionDateParameter = acuqusitionDate.HasValue ?
                new ObjectParameter("AcuqusitionDate", acuqusitionDate) :
                new ObjectParameter("AcuqusitionDate", typeof(System.DateTime));
    
            var disposalDateParameter = disposalDate.HasValue ?
                new ObjectParameter("DisposalDate", disposalDate) :
                new ObjectParameter("DisposalDate", typeof(System.DateTime));
    
            var daysuseParameter = daysuse != null ?
                new ObjectParameter("Daysuse", daysuse) :
                new ObjectParameter("Daysuse", typeof(string));
    
            var unitParameter = unit != null ?
                new ObjectParameter("Unit", unit) :
                new ObjectParameter("Unit", typeof(string));
    
            var rateUnitParameter = rateUnit != null ?
                new ObjectParameter("RateUnit", rateUnit) :
                new ObjectParameter("RateUnit", typeof(string));
    
            var ppriceParameter = pprice != null ?
                new ObjectParameter("pprice", pprice) :
                new ObjectParameter("pprice", typeof(string));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var userIpParameter = userIp != null ?
                new ObjectParameter("UserIp", userIp) :
                new ObjectParameter("UserIp", typeof(string));
    
            var createddateParameter = createddate.HasValue ?
                new ObjectParameter("Createddate", createddate) :
                new ObjectParameter("Createddate", typeof(System.DateTime));
    
            var assetNameParameter = assetName != null ?
                new ObjectParameter("AssetName", assetName) :
                new ObjectParameter("AssetName", typeof(string));
    
            var paymntmodeParameter = paymntmode != null ?
                new ObjectParameter("paymntmode", paymntmode) :
                new ObjectParameter("paymntmode", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(bool));
    
            var assetrcvdParameter = assetrcvd != null ?
                new ObjectParameter("assetrcvd", assetrcvd) :
                new ObjectParameter("assetrcvd", typeof(string));
    
            var desginationasstParameter = desginationasst != null ?
                new ObjectParameter("desginationasst", desginationasst) :
                new ObjectParameter("desginationasst", typeof(string));
    
            var verifieddtParameter = verifieddt.HasValue ?
                new ObjectParameter("verifieddt", verifieddt) :
                new ObjectParameter("verifieddt", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_fixed_asset_reg", assetDescrptionParameter, catgryddlParameter, subCatgryddlParameter, locddlParameter, deptddlParameter, roomddlParameter, supplierInfoParameter, conditionInfoParameter, receivedvocuherParameter, generalvoucherParameter, acuqusitionDateParameter, disposalDateParameter, daysuseParameter, unitParameter, rateUnitParameter, ppriceParameter, userIdParameter, userIpParameter, createddateParameter, assetNameParameter, paymntmodeParameter, statusParameter, assetrcvdParameter, desginationasstParameter, verifieddtParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_fixedasset(string catName, string uid, string userIp, Nullable<System.DateTime> created_Date, Nullable<bool> status, Nullable<int> catid, string prefix, Nullable<decimal> depreciationPerYear, string tagNo)
        {
            var catNameParameter = catName != null ?
                new ObjectParameter("CatName", catName) :
                new ObjectParameter("CatName", typeof(string));
    
            var uidParameter = uid != null ?
                new ObjectParameter("Uid", uid) :
                new ObjectParameter("Uid", typeof(string));
    
            var userIpParameter = userIp != null ?
                new ObjectParameter("UserIp", userIp) :
                new ObjectParameter("UserIp", typeof(string));
    
            var created_DateParameter = created_Date.HasValue ?
                new ObjectParameter("Created_Date", created_Date) :
                new ObjectParameter("Created_Date", typeof(System.DateTime));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var catidParameter = catid.HasValue ?
                new ObjectParameter("Catid", catid) :
                new ObjectParameter("Catid", typeof(int));
    
            var prefixParameter = prefix != null ?
                new ObjectParameter("Prefix", prefix) :
                new ObjectParameter("Prefix", typeof(string));
    
            var depreciationPerYearParameter = depreciationPerYear.HasValue ?
                new ObjectParameter("DepreciationPerYear", depreciationPerYear) :
                new ObjectParameter("DepreciationPerYear", typeof(decimal));
    
            var tagNoParameter = tagNo != null ?
                new ObjectParameter("TagNo", tagNo) :
                new ObjectParameter("TagNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_fixedasset", catNameParameter, uidParameter, userIpParameter, created_DateParameter, statusParameter, catidParameter, prefixParameter, depreciationPerYearParameter, tagNoParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_fixedAsset_Deparemnt(string hospNo, string departmentName, string empid, string orderNo, string tagNo)
        {
            var hospNoParameter = hospNo != null ?
                new ObjectParameter("HospNo", hospNo) :
                new ObjectParameter("HospNo", typeof(string));
    
            var departmentNameParameter = departmentName != null ?
                new ObjectParameter("DepartmentName", departmentName) :
                new ObjectParameter("DepartmentName", typeof(string));
    
            var empidParameter = empid != null ?
                new ObjectParameter("empid", empid) :
                new ObjectParameter("empid", typeof(string));
    
            var orderNoParameter = orderNo != null ?
                new ObjectParameter("OrderNo", orderNo) :
                new ObjectParameter("OrderNo", typeof(string));
    
            var tagNoParameter = tagNo != null ?
                new ObjectParameter("TagNo", tagNo) :
                new ObjectParameter("TagNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_fixedAsset_Deparemnt", hospNoParameter, departmentNameParameter, empidParameter, orderNoParameter, tagNoParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_fixedAsset_Employee(string name, string dept, string desg, string type)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var deptParameter = dept != null ?
                new ObjectParameter("dept", dept) :
                new ObjectParameter("dept", typeof(string));
    
            var desgParameter = desg != null ?
                new ObjectParameter("desg", desg) :
                new ObjectParameter("desg", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_fixedAsset_Employee", nameParameter, deptParameter, desgParameter, typeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_fixedAsset_Room(string hospNo, string roomName, string dept)
        {
            var hospNoParameter = hospNo != null ?
                new ObjectParameter("HospNo", hospNo) :
                new ObjectParameter("HospNo", typeof(string));
    
            var roomNameParameter = roomName != null ?
                new ObjectParameter("RoomName", roomName) :
                new ObjectParameter("RoomName", typeof(string));
    
            var deptParameter = dept != null ?
                new ObjectParameter("dept", dept) :
                new ObjectParameter("dept", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_fixedAsset_Room", hospNoParameter, roomNameParameter, deptParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_fixedAsset_supplier(string catName, string addres, string email, string phone, string uid, string ip)
        {
            var catNameParameter = catName != null ?
                new ObjectParameter("CatName", catName) :
                new ObjectParameter("CatName", typeof(string));
    
            var addresParameter = addres != null ?
                new ObjectParameter("addres", addres) :
                new ObjectParameter("addres", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("phone", phone) :
                new ObjectParameter("phone", typeof(string));
    
            var uidParameter = uid != null ?
                new ObjectParameter("uid", uid) :
                new ObjectParameter("uid", typeof(string));
    
            var ipParameter = ip != null ?
                new ObjectParameter("ip", ip) :
                new ObjectParameter("ip", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_fixedAsset_supplier", catNameParameter, addresParameter, emailParameter, phoneParameter, uidParameter, ipParameter);
        }
    
        public virtual ObjectResult<string> sp_Issued_Asset(string assetId, string assetNo, Nullable<int> hospId, Nullable<long> deptId, string roomId, string transferReason, string depricaitionValue, string transferBy, string transferDate, string receivedBy, string receivedDate, string varifiedBy, string varifiedDate, string entryBy, string entryIp, Nullable<int> aprovedid, string approveddate, string custodian)
        {
            var assetIdParameter = assetId != null ?
                new ObjectParameter("AssetId", assetId) :
                new ObjectParameter("AssetId", typeof(string));
    
            var assetNoParameter = assetNo != null ?
                new ObjectParameter("AssetNo", assetNo) :
                new ObjectParameter("AssetNo", typeof(string));
    
            var hospIdParameter = hospId.HasValue ?
                new ObjectParameter("hospId", hospId) :
                new ObjectParameter("hospId", typeof(int));
    
            var deptIdParameter = deptId.HasValue ?
                new ObjectParameter("DeptId", deptId) :
                new ObjectParameter("DeptId", typeof(long));
    
            var roomIdParameter = roomId != null ?
                new ObjectParameter("roomId", roomId) :
                new ObjectParameter("roomId", typeof(string));
    
            var transferReasonParameter = transferReason != null ?
                new ObjectParameter("TransferReason", transferReason) :
                new ObjectParameter("TransferReason", typeof(string));
    
            var depricaitionValueParameter = depricaitionValue != null ?
                new ObjectParameter("depricaitionValue", depricaitionValue) :
                new ObjectParameter("depricaitionValue", typeof(string));
    
            var transferByParameter = transferBy != null ?
                new ObjectParameter("TransferBy", transferBy) :
                new ObjectParameter("TransferBy", typeof(string));
    
            var transferDateParameter = transferDate != null ?
                new ObjectParameter("TransferDate", transferDate) :
                new ObjectParameter("TransferDate", typeof(string));
    
            var receivedByParameter = receivedBy != null ?
                new ObjectParameter("ReceivedBy", receivedBy) :
                new ObjectParameter("ReceivedBy", typeof(string));
    
            var receivedDateParameter = receivedDate != null ?
                new ObjectParameter("ReceivedDate", receivedDate) :
                new ObjectParameter("ReceivedDate", typeof(string));
    
            var varifiedByParameter = varifiedBy != null ?
                new ObjectParameter("VarifiedBy", varifiedBy) :
                new ObjectParameter("VarifiedBy", typeof(string));
    
            var varifiedDateParameter = varifiedDate != null ?
                new ObjectParameter("VarifiedDate", varifiedDate) :
                new ObjectParameter("VarifiedDate", typeof(string));
    
            var entryByParameter = entryBy != null ?
                new ObjectParameter("entryBy", entryBy) :
                new ObjectParameter("entryBy", typeof(string));
    
            var entryIpParameter = entryIp != null ?
                new ObjectParameter("entryIp", entryIp) :
                new ObjectParameter("entryIp", typeof(string));
    
            var aprovedidParameter = aprovedid.HasValue ?
                new ObjectParameter("aprovedid", aprovedid) :
                new ObjectParameter("aprovedid", typeof(int));
    
            var approveddateParameter = approveddate != null ?
                new ObjectParameter("Approveddate", approveddate) :
                new ObjectParameter("Approveddate", typeof(string));
    
            var custodianParameter = custodian != null ?
                new ObjectParameter("Custodian", custodian) :
                new ObjectParameter("Custodian", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_Issued_Asset", assetIdParameter, assetNoParameter, hospIdParameter, deptIdParameter, roomIdParameter, transferReasonParameter, depricaitionValueParameter, transferByParameter, transferDateParameter, receivedByParameter, receivedDateParameter, varifiedByParameter, varifiedDateParameter, entryByParameter, entryIpParameter, aprovedidParameter, approveddateParameter, custodianParameter);
        }
    
        public virtual ObjectResult<sp_LoadAllJobsByMachineNo_Result> sp_LoadAllJobsByMachineNo(string serialNo, string type)
        {
            var serialNoParameter = serialNo != null ?
                new ObjectParameter("SerialNo", serialNo) :
                new ObjectParameter("SerialNo", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_LoadAllJobsByMachineNo_Result>("sp_LoadAllJobsByMachineNo", serialNoParameter, typeParameter);
        }
    
        public virtual ObjectResult<sp_LoadAllMachineDetail_Result> sp_LoadAllMachineDetail(string id)
        {
            var idParameter = id != null ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_LoadAllMachineDetail_Result>("sp_LoadAllMachineDetail", idParameter);
        }
    
        public virtual int sp_report_YearWise(string catId, string projectID)
        {
            var catIdParameter = catId != null ?
                new ObjectParameter("catId", catId) :
                new ObjectParameter("catId", typeof(string));
    
            var projectIDParameter = projectID != null ?
                new ObjectParameter("projectID", projectID) :
                new ObjectParameter("projectID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_report_YearWise", catIdParameter, projectIDParameter);
        }
    
        public virtual int sp_report_YearWiseDisposal(string catId)
        {
            var catIdParameter = catId != null ?
                new ObjectParameter("catId", catId) :
                new ObjectParameter("catId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_report_YearWiseDisposal", catIdParameter);
        }
    
        public virtual int sp_saveInspection(string grn, string itemID, string assetName, string model, string serialNo, string manufacturerName, string manufacturerOrign, string supplierName, string supplierAddress, string supplierTel, string supplierMob, Nullable<System.DateTime> warranty, string trainningRequired, Nullable<bool> operatingManual, Nullable<bool> servicesManual, string purchaseOrderNo, string purchasePrice, string foreginCurrency, string equivalentPKR, Nullable<bool> logBook, string inspectedName, string inspectedDesig, string inspectedRecomm, string inspectedRemarks, string userAccName, string userAccReco, string userAccRemarks, string bioMedicalRecom, string bioMedicalRemarks, Nullable<bool> status, string iP, string uid)
        {
            var grnParameter = grn != null ?
                new ObjectParameter("grn", grn) :
                new ObjectParameter("grn", typeof(string));
    
            var itemIDParameter = itemID != null ?
                new ObjectParameter("itemID", itemID) :
                new ObjectParameter("itemID", typeof(string));
    
            var assetNameParameter = assetName != null ?
                new ObjectParameter("AssetName", assetName) :
                new ObjectParameter("AssetName", typeof(string));
    
            var modelParameter = model != null ?
                new ObjectParameter("model", model) :
                new ObjectParameter("model", typeof(string));
    
            var serialNoParameter = serialNo != null ?
                new ObjectParameter("serialNo", serialNo) :
                new ObjectParameter("serialNo", typeof(string));
    
            var manufacturerNameParameter = manufacturerName != null ?
                new ObjectParameter("ManufacturerName", manufacturerName) :
                new ObjectParameter("ManufacturerName", typeof(string));
    
            var manufacturerOrignParameter = manufacturerOrign != null ?
                new ObjectParameter("ManufacturerOrign", manufacturerOrign) :
                new ObjectParameter("ManufacturerOrign", typeof(string));
    
            var supplierNameParameter = supplierName != null ?
                new ObjectParameter("SupplierName", supplierName) :
                new ObjectParameter("SupplierName", typeof(string));
    
            var supplierAddressParameter = supplierAddress != null ?
                new ObjectParameter("SupplierAddress", supplierAddress) :
                new ObjectParameter("SupplierAddress", typeof(string));
    
            var supplierTelParameter = supplierTel != null ?
                new ObjectParameter("SupplierTel", supplierTel) :
                new ObjectParameter("SupplierTel", typeof(string));
    
            var supplierMobParameter = supplierMob != null ?
                new ObjectParameter("SupplierMob", supplierMob) :
                new ObjectParameter("SupplierMob", typeof(string));
    
            var warrantyParameter = warranty.HasValue ?
                new ObjectParameter("Warranty", warranty) :
                new ObjectParameter("Warranty", typeof(System.DateTime));
    
            var trainningRequiredParameter = trainningRequired != null ?
                new ObjectParameter("TrainningRequired", trainningRequired) :
                new ObjectParameter("TrainningRequired", typeof(string));
    
            var operatingManualParameter = operatingManual.HasValue ?
                new ObjectParameter("OperatingManual", operatingManual) :
                new ObjectParameter("OperatingManual", typeof(bool));
    
            var servicesManualParameter = servicesManual.HasValue ?
                new ObjectParameter("ServicesManual", servicesManual) :
                new ObjectParameter("ServicesManual", typeof(bool));
    
            var purchaseOrderNoParameter = purchaseOrderNo != null ?
                new ObjectParameter("PurchaseOrderNo", purchaseOrderNo) :
                new ObjectParameter("PurchaseOrderNo", typeof(string));
    
            var purchasePriceParameter = purchasePrice != null ?
                new ObjectParameter("PurchasePrice", purchasePrice) :
                new ObjectParameter("PurchasePrice", typeof(string));
    
            var foreginCurrencyParameter = foreginCurrency != null ?
                new ObjectParameter("ForeginCurrency", foreginCurrency) :
                new ObjectParameter("ForeginCurrency", typeof(string));
    
            var equivalentPKRParameter = equivalentPKR != null ?
                new ObjectParameter("EquivalentPKR", equivalentPKR) :
                new ObjectParameter("EquivalentPKR", typeof(string));
    
            var logBookParameter = logBook.HasValue ?
                new ObjectParameter("logBook", logBook) :
                new ObjectParameter("logBook", typeof(bool));
    
            var inspectedNameParameter = inspectedName != null ?
                new ObjectParameter("InspectedName", inspectedName) :
                new ObjectParameter("InspectedName", typeof(string));
    
            var inspectedDesigParameter = inspectedDesig != null ?
                new ObjectParameter("InspectedDesig", inspectedDesig) :
                new ObjectParameter("InspectedDesig", typeof(string));
    
            var inspectedRecommParameter = inspectedRecomm != null ?
                new ObjectParameter("InspectedRecomm", inspectedRecomm) :
                new ObjectParameter("InspectedRecomm", typeof(string));
    
            var inspectedRemarksParameter = inspectedRemarks != null ?
                new ObjectParameter("InspectedRemarks", inspectedRemarks) :
                new ObjectParameter("InspectedRemarks", typeof(string));
    
            var userAccNameParameter = userAccName != null ?
                new ObjectParameter("UserAccName", userAccName) :
                new ObjectParameter("UserAccName", typeof(string));
    
            var userAccRecoParameter = userAccReco != null ?
                new ObjectParameter("UserAccReco", userAccReco) :
                new ObjectParameter("UserAccReco", typeof(string));
    
            var userAccRemarksParameter = userAccRemarks != null ?
                new ObjectParameter("UserAccRemarks", userAccRemarks) :
                new ObjectParameter("UserAccRemarks", typeof(string));
    
            var bioMedicalRecomParameter = bioMedicalRecom != null ?
                new ObjectParameter("BioMedicalRecom", bioMedicalRecom) :
                new ObjectParameter("BioMedicalRecom", typeof(string));
    
            var bioMedicalRemarksParameter = bioMedicalRemarks != null ?
                new ObjectParameter("BioMedicalRemarks", bioMedicalRemarks) :
                new ObjectParameter("BioMedicalRemarks", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(bool));
    
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            var uidParameter = uid != null ?
                new ObjectParameter("uid", uid) :
                new ObjectParameter("uid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_saveInspection", grnParameter, itemIDParameter, assetNameParameter, modelParameter, serialNoParameter, manufacturerNameParameter, manufacturerOrignParameter, supplierNameParameter, supplierAddressParameter, supplierTelParameter, supplierMobParameter, warrantyParameter, trainningRequiredParameter, operatingManualParameter, servicesManualParameter, purchaseOrderNoParameter, purchasePriceParameter, foreginCurrencyParameter, equivalentPKRParameter, logBookParameter, inspectedNameParameter, inspectedDesigParameter, inspectedRecommParameter, inspectedRemarksParameter, userAccNameParameter, userAccRecoParameter, userAccRemarksParameter, bioMedicalRecomParameter, bioMedicalRemarksParameter, statusParameter, iPParameter, uidParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_sub_fixedasset(string uid, string userIp, string sub_catname, Nullable<long> catId, Nullable<int> sub_catID, string prefix, string tagno)
        {
            var uidParameter = uid != null ?
                new ObjectParameter("Uid", uid) :
                new ObjectParameter("Uid", typeof(string));
    
            var userIpParameter = userIp != null ?
                new ObjectParameter("UserIp", userIp) :
                new ObjectParameter("UserIp", typeof(string));
    
            var sub_catnameParameter = sub_catname != null ?
                new ObjectParameter("Sub_catname", sub_catname) :
                new ObjectParameter("Sub_catname", typeof(string));
    
            var catIdParameter = catId.HasValue ?
                new ObjectParameter("CatId", catId) :
                new ObjectParameter("CatId", typeof(long));
    
            var sub_catIDParameter = sub_catID.HasValue ?
                new ObjectParameter("sub_catID", sub_catID) :
                new ObjectParameter("sub_catID", typeof(int));
    
            var prefixParameter = prefix != null ?
                new ObjectParameter("prefix", prefix) :
                new ObjectParameter("prefix", typeof(string));
    
            var tagnoParameter = tagno != null ?
                new ObjectParameter("tagno", tagno) :
                new ObjectParameter("tagno", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_sub_fixedasset", uidParameter, userIpParameter, sub_catnameParameter, catIdParameter, sub_catIDParameter, prefixParameter, tagnoParameter);
        }
    
        public virtual ObjectResult<verify_logins_Result> verify_logins(string memlogin, string mempassword)
        {
            var memloginParameter = memlogin != null ?
                new ObjectParameter("memlogin", memlogin) :
                new ObjectParameter("memlogin", typeof(string));
    
            var mempasswordParameter = mempassword != null ?
                new ObjectParameter("mempassword", mempassword) :
                new ObjectParameter("mempassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<verify_logins_Result>("verify_logins", memloginParameter, mempasswordParameter);
        }
    
        public virtual ObjectResult<sp_getDataRoomWise_Result> sp_getDataRoomWise(string roomname)
        {
            var roomnameParameter = roomname != null ?
                new ObjectParameter("roomname", roomname) :
                new ObjectParameter("roomname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getDataRoomWise_Result>("sp_getDataRoomWise", roomnameParameter);
        }
    
        public virtual ObjectResult<sp_getdataforandroid_Result> sp_getdataforandroid(string assetId)
        {
            var assetIdParameter = assetId != null ?
                new ObjectParameter("assetId", assetId) :
                new ObjectParameter("assetId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getdataforandroid_Result>("sp_getdataforandroid", assetIdParameter);
        }
    
        public virtual ObjectResult<sp_getFixedAssitlistMinuteApi_Result> sp_getFixedAssitlistMinuteApi(Nullable<int> projectId, Nullable<int> departmentID, Nullable<int> typeID, Nullable<int> typeSubID)
        {
            var projectIdParameter = projectId.HasValue ?
                new ObjectParameter("ProjectId", projectId) :
                new ObjectParameter("ProjectId", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var typeIDParameter = typeID.HasValue ?
                new ObjectParameter("typeID", typeID) :
                new ObjectParameter("typeID", typeof(int));
    
            var typeSubIDParameter = typeSubID.HasValue ?
                new ObjectParameter("typeSubID", typeSubID) :
                new ObjectParameter("typeSubID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getFixedAssitlistMinuteApi_Result>("sp_getFixedAssitlistMinuteApi", projectIdParameter, departmentIDParameter, typeIDParameter, typeSubIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_ServiceCode()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_ServiceCode");
        }
    }
}
